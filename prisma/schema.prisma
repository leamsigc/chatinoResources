// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: You probably want to change this to another database later on
  provider = "sqlite"
  // This value is read from the .env file.
  url      = env("DATABASE_URL")
}

model AuthUser {
  id             String        @id @unique
  username       String        @unique
  auth_session   AuthSession[]
  auth_key       AuthKey[]
  translatio     Translation[]
  comment        Comment[]
  email          String        @unique
  email_verified Boolean       @default(false)
  Like           Like[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Translation {
  id       String    @id @unique
  language String
  example  String?
  label    String?
  chatino  String
  english  String?
  spanish  String?
  rate     BigInt
  audioUrl String?
  videoUrl String?
  imageUrl String
  comments Comment[]

  //relation to the user who created the translation
  user    AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id String
  Like    Like[]

  @@map("translation")
}

model Comment {
  id             String      @id @unique
  comment        String
  translation    Translation @relation(references: [id], fields: [translation_id], onDelete: Cascade)
  translation_id String
  user           AuthUser    @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id        String

  @@map("comment")
}

//Create a like model for prisma to use to create the table in the database and the relations to the other tables in the database  the like shoulb unique for user and can be like or dislike
model Like {
  id             String      @id @unique
  like           Boolean
  translation    Translation @relation(references: [id], fields: [translation_id], onDelete: Cascade)
  translation_id String
  user           AuthUser    @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id        String

  @@map("like")
}
